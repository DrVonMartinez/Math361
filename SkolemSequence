package edu.ilstu;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class Skolem
{
	public static void main(String arg[])
	{
		Scanner keyboard = new Scanner(System.in);
		int choice = 0;
		List<String> sequence = new ArrayList<String>();
		while(choice != 1 && choice != 2){
			System.out.println("Enter 1 to create a regular Skolem sequence. Enter 2 to create a split Skolem sequence.");
			choice = keyboard.nextInt();
		}


		if(choice == 1){
			System.out.print("Enter Order of regular Skolem sequence: ");
			int m= keyboard.nextInt();
			sequence = regularSkolemSequence(sequence, m);	
		}
		else
		{
			System.out.println("Enter order of split Skolem sequence:");
			int m = keyboard.nextInt();
			sequence = skolem(sequence,m);
			if(sequence.size() == 0)
				sequence = hookedSkolemSequence(sequence,m);
		}
		
		printSequence(sorter(sequence));		
	}

	private static void printSequence(List<String> sequence)
	{
		System.out.println();
		for(int i = 0; i<sequence.size(); i++)
		{
			System.out.println(sequence.get(i));
		}
	}

	
	private static List<String> sorter(List<String> sequence){
		CustomComparator comparator3000 = new CustomComparator();
		Collections.sort(sequence,comparator3000);
		return sequence;
	}
	


	private static List<String> regularSkolemSequence(List<String> sequence, int m)
	{
		if (m%4 == 0 && m>=8)
		{
			int s=m/4;
			for(int r=1; r<=2*s; r++)
			{
				sequence.add("("+(4*s-2*r+2) +","+ (4*s+r-1+ (m))+"," + (8*s-r+1+(m)) + ")");
			}
			for(int r=1; r<=(s-2); r++)
			{
				sequence.add("(" + (4*s-2*r-1)+"," + (r+(m)) + ","+ (4*s-r-1+(m))+ ")"); 
				sequence.add("("+(2*s-2*r-1) + ","+ (s+r +1+(m)) + ","+ (3*s-r+(m)) + ")");
			}
			sequence.add("("+ (2*s+1) +"," + (s-1 +(m))+ ","+(3*s + (m))+ ")");
			sequence.add("(1,"+ (s+m)+ ","+(s+1+m)+ ")");
			sequence.add("(" +(2*s -1) + "," + (2*s+(m))+ ","+(4*s-1+(m))+ ")");
			sequence.add("(" +(4*s-1)+ "," +(2*s+1+(m))+ ","+(6*s+(m))+ ")");
		}
		else if (m%4 == 1)
		{
			int s=(m-1)/4;
			for(int r=1; r<=2*s; r++)
			{
				sequence.add("("+(4*s-2*r+2) +","+ (4*s+r+1+ m)+"," + (8*s-r+3+(m)) + ")");
			}
			for(int r=1; r<=(s); r++)
			{
				sequence.add("(" + (4*s-2*r+1)+"," + (r+(m)) + ","+ (4*s-r+1+(m))+ ")"); 
			}
			for(int r=1; r<=(s-2); r++)
			{
				sequence.add("("+(2*s-2*r-1) + ","+ (s+r +2+(m)) + ","+ (3*s-r+1+(m)) + ")");
			}
			sequence.add("(1,"+ (s+1+m)+ ","+(s+2+m)+ ")");
			sequence.add("(" +(4*s +1) + "," + (2*s+1+(m))+ ","+(6*s+2+(m))+ ")");
			sequence.add("(" +(2*s-1)+ "," +(2*s+2+(m))+ ","+(4*s+1+(m))+ ")");
		}
		return sequence;
	}

	private static List<String> hookedSkolemSequence(List<String> sequence, int m)
	{
		int s, big, small, diff;
		if(m%4 ==1 && m!=5)
		{
			s = (m-1)/4;
			for(int r = 1; r<=2*s; r++)
			{
				big = 4*s - r +2;
				small = r;
				diff = big-small;
				sequence.add("(" + diff + "," + (small + m) + "," + (big+m) + ")");
			}
			for(int r = 1; r<=s; r++)
			{
				big = 7*s - r +3;
				small = 5*s + r;
				diff = big-small;
				sequence.add("(" + diff + "," + (small+m) + "," + (big+m) + ")");
			}
			for(int r = 1; r<=s - 2; r++)
			{
				big = 8*s - r +3;
				small = 4*s + r + 2;
				diff = big-small;
				sequence.add("(" + diff + "," + (small+m) + "," + (big+m) + ")");
			}
			sequence.add("(" + (4*s+1) + "," + (2*s + 1+m)+ "," + (6*s + 2+m) + ")");
			sequence.add("(" + (2*s+3) + "," + (6*s + 1+m)+ "," + (8*s + 4+m) + ")");
			sequence.add("(" + (1) + "," + (7*s + 3 + m)+ "," + (7*s + 4 + m) + ")");
		}
		else if(m==5)
		{
			sequence.add("(1,14,15)");
			sequence.add("(2,6,8)");
			sequence.add("(3,7,10)");
			sequence.add("(4,9,13)");
			sequence.add("(5,12,17)");
		}
		else if(m%4 ==2)
		{
			s = (m-2)/4;
			for(int r = 1; r<=2*s; r++)
			{
				big = 4*s - r +3 + m;
				small = r + m;
				diff = big-small;
				sequence.add("(" + diff + "," + (small+diff) + "," + (big+diff) + ")");
			}
			for(int r = 1; r<s-1; r++)
			{
				big = 8*s - r +4 + m;
				small = 4*s + r+4 + m;
				diff = big-small;
				sequence.add("(" + diff + "," + (small+diff) + "," + (big+diff) + ")");
			}
			for(int r = 1; r<s - 2; r++)
			{
				big = 7*s - r +3 + m;
				small = 5*s + r + 3 + m;
				diff = big-small;
				sequence.add("(" + diff + "," + (small+diff) + "," + (big+diff) + ")");
			}
			sequence.add("(" + (4*s+2) + "," + (2*s + 1 + m)+ "," + (6*s + 3 + m) + ")");
			sequence.add("(" + (4*s) + "," + (2*s + 2 + m)+ "," + (6*s + 2 + m) + ")");
			sequence.add("(" + (2*s) + "," + (4*s + 4 + m)+ "," + (6*s + 4 + m) + ")");
			sequence.add("(" + (2) + "," + (8*s + 4 + m)+ "," + (8*s + 6 + m) + ")");
			sequence.add("(" + (1) + "," + (7*s + 3 + m)+ "," + (7*s + 4 + m) + ")");

		}
		return sequence;
	}	

	private static List<String> skolem(List<String> sequence, int m)
	{
		int s = 0;
		int u = 0;
		int v = 0;
		int diff = 0;
		if (m%4 == 0){
			s = m/4;
			for (int r = 1; r <= (s-1); r++){
				u = r;
				v = 4*s - r + 1;
				diff = v - u;
				sequence.add("(" + diff + ", " + (u + m) + ", " + (v + m) + ")");
			}
			for (int r = 1; r<= (s-1); r++){
				u = s + r - 1;
				v = 3*s - r;
				diff = v - u;
				sequence.add("(" + diff + ", " +(u + m) + ", " + (v + m) +  ")");
			}
			for (int r = 1; r<= (s-1); r++){
				u = 4*s + r + 1;
				v = 8*s - r + 1;
				diff = v - u;
				sequence.add("(" +  diff +", " +(u + m) + ", " + (v + m) + ")");
			}
			for (int r = 1; r<= (s-1); r++){
				u = 5*s + r + 1;
				v = 7*s - r + 1; 
				diff = v - u;
				sequence.add("(" + diff+ ", " + (u + m) + ", " + (v + m) + ")");
			}

			sequence.add("(" + "1"+", " + (2*s - 1 + m) + ", " + (2*s + m) + ")");
			sequence.add("(" + (2*s + 1) + ", " +(3*s + m) + ", " + (5*s + 1 + m) +  ")");
			sequence.add("(" + (4*s)+ ", " +(3*s + 1 + m) + ", " + (7*s + 1 + m) +  ")");
			sequence.add("(" + (2*s) + ", " +(6*s + 1 + m) + ", " + (8*s + 1 + m) + ")");
		}
		else if(m%4 == 3){
			s = (m + 1)/ 4;
			for (int r = 1; r<= (2*s - 1); r++){
				u = r;
				v = 4*s - r;
				diff = v - u;
				sequence.add("(" + diff + ", " +(u + m) + ", " + (v + m)  + ")");
			}
			for (int r = 1; r<=(s-2); r++){
				u = 4*s + r - 1;
				v = 8*s - r;
				diff = v - u;
				sequence.add("(" + diff +", " + (u + m) + ", " + (v + m) + ")");
			}
			for (int r = 1; r <= (s - 2); r++){
				u = 5*s + r;
				v = 7*s - r - 1;
				diff = v - u;
				sequence.add("(" + diff +", " + (u + m) + ", " + (v + m) +  ")");
			}
			sequence.add("(" + (4*s - 1)+ ", " +(2*s + m) + ", " + (6*s - 1 + m)   + ")");
			sequence.add("(" + (2*s + 1) +", " + (5*s + m) + ", " + (7*s + 1 + m)  + ")");
			sequence.add("(" + (2*s - 1) + ", " +(4*s + 1 + m) + ", " + (6*s + m)  + ")");
			sequence.add("(" + "1" +", " + (7*s - 1 + m) + ", " + (7*s + m)  + ")");
		}
		return sequence;
	}



	public static class  CustomComparator implements Comparator<String>
	{

		@Override
		public int compare(String arg0, String arg1)
		{
			Integer number1 = Integer.parseInt(arg0.substring(1, arg0.indexOf(",")));
			Integer number2 = Integer.parseInt(arg1.substring(1, arg1.indexOf(",")));
			return number1 - number2;
		}
	}

}
